# Copyright (C) 2016 Nokia Corporation and/or its subsidiary(-ies).

[integration]
# Python module providing integration between your environment and the deployer
# As long as this module is importable by the deployer (eg in on the PYTHONPATH), it can live anywhere on your system.
# See the deployment.integrationexample.integration.Dummy module code for documentation
provider=deployment.integrationexample.integration.Dummy

# Which cookie is used to store the user sessionid
# (refer to the authentication flow described in the documentation for details).
# This cookie is set by your authentication page (not provided by the deployer).
# This cookie can (and probably should) be Secure and HttpOnly
#
# A sessionid is exchanged by clients against a short lived deployer token. The token is then used for authenticating the requests made by this client. (route /api/auth/wssession)
# The API will first try to read the user sessionid from this cookie, then from the sessionid value provided in the request body.
sessionid_cookie=yourcompanyauth_sessionid


[general]
# Path where the deployer will clone the Git repositories to deploy
# The deployer does not perform any real cleanup in this folder yet, make sure
# you have enough free disk space.
local_repo_path=/home/deploy/git_deploy

# In addition to per-repository notification mails, the deployer will send a mail about each deployment to these addresses (comma-separated)
notify_mails=sysadmins@example.com,developers@example.com

# The deployer needs a Beanstalkd queue to enqueue deployment jobs. This can be a locally running queue, and you don't have to use the same queue for several instances, nor do you need to persist the queue (this dependency should be removed in the future). The port is currenly hardcoded and set to 11300.
beanstalk_host=127.0.0.1

# User and password to use to connect to the HAProxy admin. Required even if you don't use HAProxy, just put dummy values here in that case.
haproxy_user=admin
haproxy_pass=password

# Graphite server information
# The deployer will send events under the form "{environment}.deploy.{repository},", for instance "prod.deploy.awesomeproject".
carbon_host=0.0.0.0
carbon_port=2013

# Deprecated. You can protect some API paths using a token that the client must provide under the HTTP header "X-Auth-Token". This will probably be removed in a future release.
auth_token=mytoken
token_protected_paths=[]

# On which port the webserver will be listening. Currenly, there is no option to listen on a specific interface.
# Listening on ports under 1000 will require root privileges or the 'cap_net_bind_service' capability. You can also use a reverse proxy.
api_port=80
websocket_port=9000

# Path to the folder containing the web UI files (notably the index.html file).
# See the README for how to build these files.
web_path=./web/static


[database]
# SQLALchemy connection string (http://docs.sqlalchemy.org/en/latest/core/engines.html#database-urls)
connection=mysql://root:root@localhost/deploy


[mail]
# Mail transfer agent to use for outgoing mail.
mta=mta.corp.withings.com

# Sender (From: field) of mails sent by the deployer.
sender=deploy@withings.com


[cluster]
# Options for fault tolerance.
# You can deploy several deployer instances behind a HTTP load balancer (LBA). You will need to load balance websockets connections (port 9000 by default) too.

# Endpoint for this instance (direct URL, not through the LBA)
this_deployer_url=http://deploy1.example.com:80

# List of all the deployer endpoints  (direct URLs, not through the LBA)
deployers_urls=http://deploy1.example.com:80,http://deploy2.example.com:80

# Each deployer instance must have an user in the deployer DB
# with the permission "deployer". You can use the web UI to create these users.
this_deployer_username=deployer1
this_deployer_token=deployer1_super_secret_token

[inventory]
api_host=http://example.com
activate=false
update_frequency=60
